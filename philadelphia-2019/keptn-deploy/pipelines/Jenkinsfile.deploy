@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'ENVIRONMENT', key: 'application', value: ''],
      [context: 'CONTEXTLESS', key: 'service', value: ''],
      [context: 'CONTEXTLESS', key: 'environment', value: '']
    ]
  ]
]

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: 'keptn-tiger', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: 'keptn-hol-JB', description: 'The name of the entire project.', trim: true)
    string(name: 'STAGE', defaultValue: 'dev', description: 'The stage to deploy the app to.', trim: true)
    string(name: 'APP', defaultValue: 'spring-music', description: 'The name of the app to deploy.', trim: true)
    string(name: 'VERSION', defaultValue: '1.0', description: 'The image of the new app.', trim: true)
  }
  agent {
    label 'deploy-cf'
  }
  stages {
    stage('Checkout configuration') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "rm -rf ${env.PROJECT}"
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.PROJECT}"
            sh "cd ${env.PROJECT} && git checkout ${env.STAGE}"
          }
        }
      }
    }
    stage('Checkout artefact') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "rm -rf spring-music"
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/johannes-b/spring-music"
            sh "cp spring-music/spring-music-1.0.jar ${env.PROJECT}"
          }
        }
      }
    }
    stage('Push app') {
      steps {
        container('cf') {
          withCredentials([usernamePassword(credentialsId: 'cf-credentials', passwordVariable: 'CF_PASSWORD', usernameVariable: 'CF_USERNAME')]) {
            sh "cf --version"
            sh "cf login --skip-ssl-validation -a https://api.phillyhol.starkandwayne.com -u ${CF_USERNAME} -p ${CF_PASSWORD} -o keptn-deploy -s ${env.STAGE}"
            /*sh "cd ${env.PROJECT} && ls && cf push -f ${env.APP}_manifest.yml"*/
          }
        }
      }
    }
    stage('Send event for staging') {
      when {
        expression {
          return env.STAGE ==~ 'dev' 
        }
      }
      steps {
        container("curl") {
          sendCloudEvent(
            receiver: 'event-broker.keptn.svc.cluster.local/keptn',
            type: 'sh.keptn.events.new-artefact',
            source: 'Jenkins', 
            data: [
              [key: 'githuborg', value: "${env.GITHUBORG}"],
              [key: 'project', value: "${env.PROJECT}"],
              [key: 'stage', value: "staging"],
              [key: 'app', value: "${env.APP}"],
              [key: 'version', value: "${env.VERSION}"]
            ]
          )
        }
      }
    }
    stage('Send event for production') {
      when {
        expression {
          return env.STAGE ==~ 'staging' 
        }
      }
      steps {
        container("curl") {
          sendCloudEvent(
            receiver: 'event-broker.keptn.svc.cluster.local/keptn',
            type: 'sh.keptn.events.new-artefact',
            source: 'Jenkins', 
            data: [
              [key: 'githuborg', value: "${env.GITHUBORG}"],
              [key: 'project', value: "${env.PROJECT}"],
              [key: 'stage', value: "production"],
              [key: 'app', value: "${env.APP}"],
              [key: 'version', value: "${env.VERSION}"]
            ]
          )
        }
      }
    }
  }
}
